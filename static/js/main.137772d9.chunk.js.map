{"version":3,"sources":["component/Search.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DropDownList","styled","li","DropDownUnorderedList","ul","DropDownListWrapper","div","DropDownListInput","input","Search","props","data","countries","useState","suggestions","setSuggestions","countrySelected","setCountrySelected","text","setText","expand","setExpand","newCountry","setNewCountry","dataSet","setDataSet","adminRights","console","log","suggestionSelected","value","expandSelected","type","name","onChange","event","e","target","handleChange","onClick","push","func","wait","timeout","args","later","clearTimeout","setTimeout","debounce","suggList","length","regex","RegExp","sort","filter","v","test","onTextChange","placeholder","slice","map","city","App","setAdminRights","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.137772d9.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components'\nimport { useState } from \"react\";\n\ntype SearchProps = {\n    countries: Array<String>\n    adminRights: boolean\n}\n\nconst Search = (props: SearchProps) => {\n    const data = props.countries\n    const [suggestions, setSuggestions] = useState([]);\n    const [countrySelected, setCountrySelected] = useState(\"\")\n    const [text, setText] = useState(\"\");\n    const [expand, setExpand] = useState(false)\n    const [newCountry, setNewCountry] = useState(\"\")\n    const [dataSet, setDataSet] = useState(data)\n    \n    const adminRights = props.adminRights\n    console.log(\"the data set....\" + dataSet)\n    const debounce = (func: any, wait: number) => {\n        let timeout: number;\n      \n        return function executedFunction(...args: any) {\n          const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n          };\n      \n          clearTimeout(timeout);\n          timeout = setTimeout(later, wait);\n        };\n      };\n    function onTextChange(e: React.ChangeEvent<HTMLInputElement>){\n\n        const value = e.target.value;\n        console.log(value)\n        let suggList: any = []\n        if (value.length > 0) {\n          const regex = new RegExp(`^${value}`, `i`);\n          console.log(\"hello.....\" + regex)\n          suggList = dataSet.sort().filter((v: any) => regex.test(v));\n        }\n        console.log(\"THIS IS THE TYPEEEEEE OF SUGGLIST...\" + typeof(suggList))\n        setSuggestions(suggList)\n        setText(value)\n     \n    }\n    function suggestionSelected(value: any){\n        console.log(\"suggestion selected....\" + value)\n        setCountrySelected(value)\n        console.log(\"country seelected....\" + countrySelected)\n        \n      }\n    function expandSelected(value: boolean) {\n        setExpand(value)\n    }\n    function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        const value = e.target.value;\n        setNewCountry(value)\n    }\n    function appendNewCountry() {\n        data.push(newCountry)\n        console.log(\"type of data is....?????\" + typeof(data))\n        setDataSet(data)\n    }\n    function renderSuggestions() {\n        console.log(\"suggestions :\" + suggestions);\n        console.log(\"type of suggestions....\" + typeof(suggestions))\n        if (suggestions.length === 0) {\n          return null;\n        }else if (suggestions.length >= 1 && expand === false){\n            return (\n                <DropDownUnorderedList>\n                  {suggestions.slice(1).map((city: any) => <DropDownList key={city} onClick={(e)=>suggestionSelected(city)}>{city}</DropDownList>)}\n                  <button onClick={() => expandSelected(true)}>{suggestions.slice(1).length + \" more countries...\"}</button>\n                </DropDownUnorderedList>\n              )\n        }else if (suggestions.length >= 1 && expand === true){\n            console.log(\"inside else if\")\n            return (\n                <DropDownUnorderedList>\n                  {suggestions.map((city: any) => <DropDownList key={city} onClick={(e)=>suggestionSelected(city)}>{city}</DropDownList>)}\n                  <button onClick={() => expandSelected(false)}>Close</button>\n                </DropDownUnorderedList>\n              )\n        }\n    }\n\n    return (\n        <DropDownListWrapper>\n            {adminRights ? \n                <div>\n                    <label>\n                        New country:\n                        <input type=\"text\" name=\"name\" onChange={event => handleChange(event)}/>\n                    </label>\n                    <button onClick={() => appendNewCountry()}>Add</button>\n                </div>\n            : \"\"}\n          <DropDownListInput onChange={event => debounce(onTextChange(event), 1000)} placeholder=\"Search city name\" value={text} type=\"text\" />\n          {renderSuggestions()}\n        </DropDownListWrapper>\n    );\n\n}\nconst DropDownList = styled.li`\n    padding: 10px 5px ;\n    cursor: pointer;\n    &:hover{\n        background: lightgray;\n        text-decoration: underline;\n    }\n`;\nconst DropDownUnorderedList = styled.ul`\nlist-style-type: none;\ntext-align: left;\nmargin: 0;\npadding: 0;\nborder-top: 1px solid gray;\n`\n\nconst DropDownListWrapper = styled.div`\n    width: 100%;\n    border: 1px solid gray;\n    box-shadow: 0 0 1px rgba(0,0,0,0.1), 0 2px 4px 1px rgba(0,0,0, .18);\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 14px;\n    color: rgba(0, 0, 0, 0.73);\n`;\n\nconst DropDownListInput = styled.input`\nwidth: 100%;\nborder: none;\nfont-family: Arial, Helvetica, sans-serif;\nfont-size: 14px;\ncolor: rgba(0, 0, 0, 0.73);\npadding: 10px 5px ;\nbox-sizing: border-box;\noutline: none;\n`;\n\nexport default Search","import React from 'react';\nimport Search from './component/Search'\nimport './App.css';\nimport { useState } from \"react\";\n\n\nfunction App() {\n  const [adminRights, setAdminRights] = useState(false);\n  function toggleAdmin() {\n    setAdminRights(!adminRights)\n  }\n  return (\n    <div className=\"App\">\n      <button onClick={() => toggleAdmin()}>Click to be admin</button>\n      <Search adminRights={adminRights} countries={[\"america\", \"singapore\", \"bangkok\", \"india\", \"japan\", \"indoneasia\", \"iceland\", \"iraq\", \"iran\", \"italy\"]}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}